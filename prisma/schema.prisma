generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               UserRoles
  refreshToken       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PasswordResetToken PasswordResetToken[]
  cultivarReviews    CultivarReview[]
}

model Country {
  id            String     @id @default(uuid())
  gentilico     String
  nome_pais     String     @unique
  nome_pais_int String
  sigla         String
  constants     Constant[] @relation("CountryConstants")
}

model CustomSoilType {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  constants Constant[]
}

model CustomBiomeType {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  constants Constant[]
}

model Constant {
  id                String             @id @default(uuid())
  value             Float
  type              ConstantTypes
  comment           String?
  climate           String?
  biome             String?
  customBiomeId     String?
  customBiome       CustomBiomeType?   @relation(fields: [customBiomeId], references: [id], onDelete: SetNull)
  irrigation        IrrigationTypes?
  countryId         String
  country           Country            @relation(fields: [countryId], references: [id], name: "CountryConstants")
  soil              SoilTypes?
  cultivationSystem CultivationSystem?
  customSoilId      String?
  customSoil        CustomSoilType?    @relation(fields: [customSoilId], references: [id], onDelete: SetNull)
  cultivarId        String
  cultivar          Cultivar           @relation(fields: [cultivarId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  linkReference     String             @default("")
}

model Crop {
  id             String     @id @default(uuid())
  name           String
  scientificName String
  cultivars      Cultivar[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Cultivar {
  id        String       @id @default(uuid())
  name      String
  constants Constant[]
  crop      Crop         @relation(fields: [cropId], references: [id], onDelete: Cascade)
  cropId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  reviews CultivarReview[]
}

model PasswordResetToken {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String  @unique
  createdAt DateTime @default(now())

  @@id([userId])
  @@map("PasswordResetTokens")
}

model CultivarReview {
  id             String       @id @default(uuid())
  justification  String?
  Cultivar       Cultivar     @relation(fields: [cultivarId], references: [id], onDelete: Cascade)
  requestedBy    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         ReviewStatus @default(Pending)
  userId         String       
  cultivarId     String        
  createdAt      DateTime     @default(now())
  reviewed_at    DateTime?
}

enum UserRoles {
  ADMIN
  OPERATOR
}

enum ReviewStatus {
  Pending
  Approved
  Declined
}

enum IrrigationTypes {
  Irrigation
  Dry
}

enum CultivationSystem {
  Conventional
  Organic
  Agroecological
}

enum SoilTypes {
  Clayey
  Sandy
  SandyClay
  Other
}

enum ConstantTypes {
  HARVEST_INDEX
  AERIAL_RESIDUE_INDEX
  PRODUCT_RESIDUE_INDEX
  PRODUCT_DRY_MATTER_FACTOR
  RESIDUE_DRY_MATTER_FACTOR
  BELOWGROUND_INDEX
  WEED_AERIAL_FACTOR
  WEED_BELOWGROUND_INDEX
}
